<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="# Compiled class files&#10;*.class&#10;&#10;# Log files&#10;*.log&#10;&#10;# BlueJ files&#10;*.ctxt&#10;&#10;# Mobile Tools for Java (J2ME)&#10;.mtj.tmp/&#10;&#10;# Package Files&#10;*.jar&#10;*.war&#10;*.nar&#10;*.ear&#10;*.zip&#10;*.tar.gz&#10;*.rar&#10;&#10;# Virtual machine crash logs&#10;hs_err_pid*&#10;&#10;# IDE files&#10;.idea/&#10;*.iml&#10;*.ipr&#10;*.iws&#10;&#10;# Maven&#10;target/&#10;&#10;# Gradle&#10;.gradle/&#10;build/&#10;&#10;# Eclipse&#10;.project&#10;.classpath&#10;.settings/&#10;&#10;# VS Code&#10;.vscode/&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Compiled binaries (we'll keep source only)&#10;bin/&#10;lib/&#10;&#10;# Config files with sensitive data&#10;config.properties&#10;" />
              <option name="updatedContent" value="# Arquivos temporários e logs&#10;*.log&#10;*.tmp&#10;&#10;# IDE files&#10;.idea/&#10;*.ipr&#10;*.iws&#10;&#10;# Eclipse&#10;.project&#10;.classpath&#10;.settings/&#10;&#10;# VS Code&#10;.vscode/&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Manter todas as pastas importantes: bin/, lib/, target/, src/&#10;# Apenas ignorar arquivos realmente desnecessários" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/executar.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/executar.bat" />
              <option name="updatedContent" value="@echo off&#10;echo =============================================&#10;echo  CONVERSOR DE MOEDAS - PROJETO ALURA&#10;echo =============================================&#10;echo.&#10;echo Compilando o projeto...&#10;javac -cp &quot;lib\gson-2.10.1.jar&quot; -d bin src\*.java src\models\*.java src\services\*.java src\ui\*.java&#10;&#10;if %ERRORLEVEL% EQU 0 (&#10;    echo Compilacao concluida com sucesso!&#10;    echo.&#10;    echo Executando o Conversor de Moedas...&#10;    echo.&#10;    java -cp &quot;bin;lib\gson-2.10.1.jar&quot; Main&#10;) else (&#10;    echo Erro na compilacao! Verifique o codigo.&#10;    pause&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ApiConsumer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ApiConsumer.java" />
              <option name="originalContent" value="import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;&#10;public class ApiConsumer {&#10;    private static final String API_URL = &quot;https://v6.exchangerate-api.com/v6/&quot;;&#10;    private static final String API_KEY = &quot;YOUR_API_KEY&quot;; // Substitua pela sua chave da API&#10;&#10;    private HttpClient client;&#10;    private Gson gson;&#10;&#10;    public ApiConsumer() {&#10;        this.client = HttpClient.newHttpClient();&#10;        this.gson = new Gson();&#10;    }&#10;&#10;    public double obterTaxaCambio(String moedaOrigem, String moedaDestino) throws IOException, InterruptedException {&#10;        // Para teste, vamos usar uma URL de exemplo sem chave (taxa fixa)&#10;        // Em produção, você deve obter uma chave gratuita em: https://www.exchangerate-api.com/&#10;        String url = &quot;https://api.exchangerate-api.com/v4/latest/&quot; + moedaOrigem;&#10;&#10;        HttpRequest request = HttpRequest.newBuilder()&#10;                .uri(URI.create(url))&#10;                .GET()&#10;                .build();&#10;&#10;        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());&#10;&#10;        if (response.statusCode() == 200) {&#10;            JsonObject jsonResponse = gson.fromJson(response.body(), JsonObject.class);&#10;            JsonObject rates = jsonResponse.getAsJsonObject(&quot;rates&quot;);&#10;&#10;            if (rates != null &amp;&amp; rates.has(moedaDestino)) {&#10;                return rates.get(moedaDestino).getAsDouble();&#10;            } else {&#10;                throw new RuntimeException(&quot;Moeda de destino não encontrada: &quot; + moedaDestino);&#10;            }&#10;        } else {&#10;            throw new RuntimeException(&quot;Erro HTTP: &quot; + response.statusCode());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;&#10;public class ApiConsumer {&#10;    private static final String API_URL = &quot;https://v6.exchangerate-api.com/v6/&quot;;&#10;    private static final String API_KEY = &quot;12bafb3f4cdc09bbacb5852d&quot;;&#10;&#10;    private HttpClient client;&#10;    private Gson gson;&#10;&#10;    public ApiConsumer() {&#10;        this.client = HttpClient.newHttpClient();&#10;        this.gson = new Gson();&#10;    }&#10;&#10;    public double obterTaxaCambio(String moedaOrigem, String moedaDestino) throws IOException, InterruptedException {&#10;        String url = API_URL + API_KEY + &quot;/latest/&quot; + moedaOrigem;&#10;&#10;        HttpRequest request = HttpRequest.newBuilder()&#10;                .uri(URI.create(url))&#10;                .GET()&#10;                .build();&#10;&#10;        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());&#10;&#10;        if (response.statusCode() == 200) {&#10;            JsonObject jsonResponse = gson.fromJson(response.body(), JsonObject.class);&#10;&#10;            // Verificar se a resposta foi bem-sucedida&#10;            if (jsonResponse.get(&quot;result&quot;).getAsString().equals(&quot;success&quot;)) {&#10;                JsonObject rates = jsonResponse.getAsJsonObject(&quot;conversion_rates&quot;);&#10;&#10;                if (rates != null &amp;&amp; rates.has(moedaDestino)) {&#10;                    return rates.get(moedaDestino).getAsDouble();&#10;                } else {&#10;                    throw new RuntimeException(&quot;Moeda de destino não encontrada: &quot; + moedaDestino);&#10;                }&#10;            } else {&#10;                throw new RuntimeException(&quot;Erro na API: &quot; + jsonResponse.get(&quot;error-type&quot;).getAsString());&#10;            }&#10;        } else {&#10;            throw new RuntimeException(&quot;Erro HTTP: &quot; + response.statusCode());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ConversorMoeda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ConversorMoeda.java" />
              <option name="originalContent" value="import java.text.DecimalFormat;&#10;&#10;public class ConversorMoeda {&#10;    private ApiConsumer apiConsumer;&#10;    private DecimalFormat formatador;&#10;&#10;    public ConversorMoeda() {&#10;        this.apiConsumer = new ApiConsumer();&#10;        this.formatador = new DecimalFormat(&quot;#,##0.00&quot;);&#10;    }&#10;&#10;    public double converter(String moedaOrigem, String moedaDestino, double valor) {&#10;        try {&#10;            double taxa = apiConsumer.obterTaxaCambio(moedaOrigem, moedaDestino);&#10;            return valor * taxa;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erro ao obter cotação: &quot; + e.getMessage());&#10;            return 0;&#10;        }&#10;    }&#10;&#10;    public void exibirResultado(String moedaOrigem, String moedaDestino, double valorOriginal, double valorConvertido) {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(50));&#10;        System.out.println(&quot;RESULTADO DA CONVERSÃO:&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;        System.out.printf(&quot;Valor original: %s %s%n&quot;, formatador.format(valorOriginal), moedaOrigem);&#10;        System.out.printf(&quot;Valor convertido: %s %s%n&quot;, formatador.format(valorConvertido), moedaDestino);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.text.DecimalFormat;&#10;&#10;public class ConversorMoeda {&#10;    private ApiConsumer apiConsumer;&#10;    private DecimalFormat formatador;&#10;&#10;    public ConversorMoeda() {&#10;        this.apiConsumer = new ApiConsumer();&#10;        this.formatador = new DecimalFormat(&quot;#,##0.00&quot;);&#10;    }&#10;&#10;    public double converter(String moedaOrigem, String moedaDestino, double valor) {&#10;        try {&#10;            double taxa = apiConsumer.obterTaxaCambio(moedaOrigem, moedaDestino);&#10;            return valor * taxa;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erro ao obter cotação: &quot; + e.getMessage());&#10;            return 0;&#10;        }&#10;    }&#10;&#10;    public void exibirResultado(String moedaOrigem, String moedaDestino, double valorOriginal, double valorConvertido) {&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(50));&#10;        System.out.println(&quot;RESULTADO DA CONVERSÃO:&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;        System.out.printf(&quot;Valor original: %s %s%n&quot;, formatador.format(valorOriginal), moedaOrigem);&#10;        System.out.printf(&quot;Valor convertido: %s %s%n&quot;, formatador.format(valorConvertido), moedaDestino);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;    }&#10;&#10;    public void exibirResultadoFormatado(String simboloOrigem, String simboloDestino, double valorOriginal, double valorConvertido) {&#10;        System.out.printf(&quot;\nO valor de %s %s corresponde a %s %s.%n&quot;,&#10;                simboloOrigem, formatador.format(valorOriginal),&#10;                simboloDestino, formatador.format(valorConvertido));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="originalContent" value="import services.CurrencyConverter;&#10;import ui.ConsoleInterface;&#10;&#10;/**&#10; * Classe principal do Conversor de Moedas&#10; * Utiliza a ExchangeRate-API para obter cotações em tempo real&#10; * &#10; * @author Projeto Alura&#10; * @version 1.0&#10; */&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        try {&#10;            CurrencyConverter converter = new CurrencyConverter();&#10;            ConsoleInterface ui = new ConsoleInterface(converter);&#10;            ui.start();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erro ao inicializar a aplicação: &quot; + e.getMessage());&#10;            System.exit(1);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import ui.ConsoleInterface;&#10;&#10;/**&#10; * Classe principal do Conversor de Moedas&#10; * Utiliza a ExchangeRate-API para obter cotações em tempo real&#10; * &#10; * @author Projeto Alura&#10; * @version 1.0&#10; */&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        try {&#10;            ConsoleInterface ui = new ConsoleInterface();&#10;            ui.run();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erro ao inicializar a aplicação: &quot; + e.getMessage());&#10;            System.exit(1);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Moeda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Moeda.java" />
              <option name="updatedContent" value="public class Moeda {&#10;    private String codigo;&#10;    private String nome;&#10;    private double taxa;&#10;&#10;    public Moeda(String codigo, String nome) {&#10;        this.codigo = codigo;&#10;        this.nome = nome;&#10;    }&#10;&#10;    public Moeda(String codigo, String nome, double taxa) {&#10;        this.codigo = codigo;&#10;        this.nome = nome;&#10;        this.taxa = taxa;&#10;    }&#10;&#10;    // Getters e Setters&#10;    public String getCodigo() {&#10;        return codigo;&#10;    }&#10;&#10;    public void setCodigo(String codigo) {&#10;        this.codigo = codigo;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public double getTaxa() {&#10;        return taxa;&#10;    }&#10;&#10;    public void setTaxa(double taxa) {&#10;        this.taxa = taxa;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nome + &quot; (&quot; + codigo + &quot;)&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/TestApiConnection.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/TestApiConnection.java" />
              <option name="updatedContent" value="import services.ExchangeRateService;&#10;import models.ExchangeRateResponse;&#10;&#10;public class TestApiConnection {&#10;    public static void main(String[] args) {&#10;        try {&#10;            System.out.println(&quot;Testando conexão com a API...&quot;);&#10;            &#10;            ExchangeRateService service = new ExchangeRateService();&#10;            ExchangeRateResponse response = service.getExchangeRates(&quot;USD&quot;);&#10;            &#10;            System.out.println(&quot;✅ API conectada com sucesso!&quot;);&#10;            System.out.println(&quot;Status: &quot; + response.getResult());&#10;            System.out.println(&quot;Moeda base: &quot; + response.getBaseCode());&#10;            System.out.println(&quot;Taxa USD para BRL: &quot; + response.getRate(&quot;BRL&quot;));&#10;            System.out.println(&quot;Taxa USD para EUR: &quot; + response.getRate(&quot;EUR&quot;));&#10;            &#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Erro ao conectar com a API:&quot;);&#10;            System.out.println(e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/ConversionHistory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/ConversionHistory.java" />
              <option name="updatedContent" value="package models;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class ConversionHistory {&#10;    private final String fromCurrency;&#10;    private final String toCurrency;&#10;    private final double originalAmount;&#10;    private final double convertedAmount;&#10;    private final double exchangeRate;&#10;    private final LocalDateTime timestamp;&#10;    private final DateTimeFormatter formatter;&#10;&#10;    public ConversionHistory(String fromCurrency, String toCurrency, double originalAmount, double convertedAmount, double exchangeRate) {&#10;        this.fromCurrency = fromCurrency;&#10;        this.toCurrency = toCurrency;&#10;        this.originalAmount = originalAmount;&#10;        this.convertedAmount = convertedAmount;&#10;        this.exchangeRate = exchangeRate;&#10;        this.timestamp = LocalDateTime.now();&#10;        this.formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm:ss&quot;);&#10;    }&#10;&#10;    public String getFromCurrency() {&#10;        return fromCurrency;&#10;    }&#10;&#10;    public String getToCurrency() {&#10;        return toCurrency;&#10;    }&#10;&#10;    public double getOriginalAmount() {&#10;        return originalAmount;&#10;    }&#10;&#10;    public double getConvertedAmount() {&#10;        return convertedAmount;&#10;    }&#10;&#10;    public double getExchangeRate() {&#10;        return exchangeRate;&#10;    }&#10;&#10;    public LocalDateTime getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;[%s] %.2f %s =&gt; %.2f %s (Taxa: %.4f)&quot;,&#10;                timestamp.format(formatter),&#10;                originalAmount, fromCurrency,&#10;                convertedAmount, toCurrency,&#10;                exchangeRate);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/ExchangeRateResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/ExchangeRateResponse.java" />
              <option name="originalContent" value="package models;&#10;&#10;import java.util.Map;&#10;&#10;public class ExchangeRateResponse {&#10;    private String result;&#10;    private String base_code;&#10;    private Map&lt;String, Double&gt; conversion_rates;&#10;&#10;    public String getResult() {&#10;        return result;&#10;    }&#10;&#10;    public String getBaseCode() {&#10;        return base_code;&#10;    }&#10;&#10;    public Map&lt;String, Double&gt; getConversionRates() {&#10;        return conversion_rates;&#10;    }&#10;&#10;    public Double getRate(String currency) {&#10;        return conversion_rates != null ? conversion_rates.get(currency) : null;&#10;    }&#10;}&#10;    public Map&lt;String, Double&gt; getConversionRates() {&#10;        return conversion_rates;&#10;    }&#10;&#10;    public void setConversionRates(Map&lt;String, Double&gt; conversion_rates) {&#10;        this.conversion_rates = conversion_rates;&#10;    }&#10;&#10;    public Double getRate(String currency) {&#10;        return conversion_rates != null ? conversion_rates.get(currency) : null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package models;&#13;&#10;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class ExchangeRateResponse {&#13;&#10;    private String result;&#13;&#10;    private String base_code;&#13;&#10;    private Map&lt;String, Double&gt; conversion_rates;&#13;&#10;&#13;&#10;    public String getResult() {&#13;&#10;        return result;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getBaseCode() {&#13;&#10;        return base_code;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Map&lt;String, Double&gt; getConversionRates() {&#13;&#10;        return conversion_rates;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setConversionRates(Map&lt;String, Double&gt; conversion_rates) {&#13;&#10;        this.conversion_rates = conversion_rates;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Double getRate(String currency) {&#13;&#10;        return conversion_rates != null ? conversion_rates.get(currency) : null;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>